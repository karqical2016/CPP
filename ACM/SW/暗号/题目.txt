中学生胜希在学校数学课上学习了进制以后，迷住了2进制数。胜希用2进制数制作了暗号。
胜希想的是暗号是，用一个自然数，实现多个常数的数列。实现的方法如下。
 首先加密的自然数转化成2个常数。下一步将这2个常数的各位数从最后一位开始7位绑在一起。

 万一位数不是7个倍数，最后绑到一起的可能不到7位。这种情况，在前边的位子用0补充构成7位。
 像这样制作的7位数，各自用十进制数重新转换。
 
 像这样生成的10进制数从最高的位子绑到一起制作的数开始，按次序排列后就是暗号。
为方便题目的理解准备了如下例题。 例如：如做自然数23456789的暗号
1.	
先求23456789的二进制数1011001011110110000010101

2.	将此二进制数从最后一位开始7个数一组分开
1011001011110110000010101 ? 1011, 0010111, 1011000, 0010101

3. 不够7位的自然数在最前边加0，构成7位
1011, 0010111, 1011000, 0010101 ? 0001011, 0010111, 1011000, 0010101

4.	将每个7位的二进制数换成10进制，按照次序排列。
0001011, 0010111, 1011000, 0010101 ? 11, 23, 88, 21

此时制作的11 23 88 21这个自然数就是23456789的暗号。
.

现在我们解读了侄子胜希的暗号，想求出胜希他想的自然数。按照上述规则生成的排列数的数组求原来自然数的程序

[限制条件]
1.通过解读暗号，出现的原来的自然数拥有1 以上 263
不到的值。
2. 暗号排列的数是0以上128不到的常数。
.
3. 暗号排列数的个数（N）是1以上9以下   。

[输入]
输入是像如下内容构成。
第一行是测试用例的个数T给予。
下一行T 是测试用例的次序给予
各测试用例是用一行实现的话，如下构成。
最开始，给出加密排列的个数N, 之后的暗号，排列数中相应的N个的常数由序列给出。各数字之间用空白区分。

[输出]
各行从#x 开始（x是测试用例号码）保留一个空白之后，按照问题要求输出原来的自然数的值。

[输入出 例]
(输入)
3
4 11 23 88 21
7 65 0 63 7 19 2 119
9 127 127 127 127 127 127 127 127 127

(输出)
#1 23456789
#2 285889949647223
#3 9223372036854775807